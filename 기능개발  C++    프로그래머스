#include <string>
#include <vector>
#include <queue> 

using namespace std; 

vector<int> solution(vector<int> progresses, vector<int> speeds) {
    vector<int> answer;
    queue<int> p;//작업이 완료되는 날을 담는 큐 p
    int day;//남은 일의 양과 하루에 작업할 수 있는 양을 나눈 값
    for(int i = 0; i < progresses.size(); i++)
    {
        day = (100 - progresses[i]) % speeds[i];
        if(day == 0)//일이 그날 딱 정확하게 다 끝낼 수 있는경우에는 남은 일의 양과 하루에 작업할 수 있는 양을 나눈 값을 큐p에 집어넣음
        {
            p.push((100 - progresses[i]) / speeds[i]);
        }
        else//일이 그 전날 조금남아서 다음날 다 끝낼 수 있는경우에는 (남은 일의 양과 하루에 작업할 수 있는 양을 나눈 값 + 1)을 큐p에 집어넣음
        {
            p.push((100 - progresses[i]) / speeds[i] + 1);
        }
    }
    while(!p.empty())
    {
        int d = p.front();//값d에는 큐p의 처음 원소를 집어넣음
        int cnt = 1;//배포하는 날 몇 개의 작업을 배포하는지 저장하는 변수
        p.pop();
        while(!p.empty() && p.front() <= d)//p가 비어있지 않거나 앞에 있는 일을 처리하는 기간이 뒤에 있는 일을 처리하는 기간보다 길 경우에만 반복문 작동 
        {
            p.pop();
            cnt++;
        }
        answer.push_back(cnt);//cnt의 값을 answer에 저장함
    }
    return answer;
}
