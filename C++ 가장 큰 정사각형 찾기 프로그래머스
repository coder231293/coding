#include <iostream>
#include<vector>
#include<algorithm>
using namespace std; 

int solution(vector<vector<int>> board)
{
    int answer = 0;
    int N = board.size();//정수N에 board크기 초기화
    int M = board[0].size(); //정수M에 board안에 제일 큰 정사각형넓이 초기화 

    if(M == 1 || N == 1) return 1;//제일 큰 정사각형크기의 넓이가 1이거나 board크기가 1이면 1반환
    for(int i = 1; i < N; i++)
    {
           for(int j = 1; j < M; j++)
           {
                  if(board[i][j] == 0)//board의 (i,j)번째 부분이 칠해지지 않았을 경우 반복문을 계속 돌리도록 함
                      continue;
                  board[i][j] = min(board[i - 1][j - 1], min(board[i - 1][j], board[i][j - 1])) + 1; //board의 (i,j)번째 부분 주변의 수가 0이 아닌경우 정사각형 형태를 유지할 수 있는 길이에 1을 더함으로써 가장 큰 정사각형 길이를 구함
      
                  answer = max(answer, board[i][j]);//현재 길이하고 앞에서 구한 길이 중 더 큰 길이가 구하고자 하는 길이이다.
           }
    } 

    return answer * answer;//앞에서 구한 길이를 제곱해서 정사각형 넓이를 구함
}
