#include <string>
#include <vector>
#include <algorithm>
#include <cmath> 

int answer = 9; 

using namespace std;
//count : number을 만들기 위해 사용한 N의 개수
//currentnumber: 계산한 수의 현재 결과
void dfs(int N, int number, int count, int currentnumber)
{
    if(count >= 9)//N이 9번이상 사용한 경우
    {
        return;
    }
    if(number == currentnumber)//number가 현재 계산한 결과랑 같은 경우
    {
        answer = min(answer, count);//answer랑 계산횟수 중 더 작은 수를 answer에 저장
        return;
    }
    int temp = 0;
    for(int i = 0; i < 9 + count;i++)
    {
        temp = temp * 10  + N;//임의의 수를 저장하는 temp에 N, NN, NNN형태의 수를 저장함
        dfs(N, number, count + 1 + i, currentnumber + temp);//현재 값이랑 temp값을 더함
        dfs(N, number, count + 1 + i, currentnumber - temp);
//현재 값이랑 temp값을 뺌
        dfs(N, number, count + 1 + i, currentnumber * temp);
//현재 값이랑 temp값을 곱함
        dfs(N, number, count + 1 + i, currentnumber / temp);
//현재 값이랑 temp값을 나눔
    }
}
int solution(int N, int number) 
{
    dfs(N, number, 0, 0);
    if(answer == 9)//N을 9번이상 사용하면 -1반환
    {
        return -1;
    }
    return answer;
}
